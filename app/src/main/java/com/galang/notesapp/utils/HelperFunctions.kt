package com.galang.notesapp.utilsimport android.content.Contextimport android.view.Viewimport android.widget.AdapterViewimport androidx.cardview.widget.CardViewimport androidx.core.content.ContextCompatimport androidx.lifecycle.MutableLiveDataimport com.galang.notesapp.Rimport com.galang.notesapp.data.entity.Notesimport com.galang.notesapp.data.entity.Priorityobject HelperFunctions {    fun spinnerListener(context : Context?, priorityIndicator : CardView): AdapterView.OnItemSelectedListener = object :        AdapterView.OnItemSelectedListener{        override fun onItemSelected(paret: AdapterView<*>?, view: View?, position: Int, id: Long) {            context?.let {                when(position){                    0 -> {                        // cara memanggil warna di object                        val pink = ContextCompat.getColor(priorityIndicator.context, R.color.pink)                        priorityIndicator.setCardBackgroundColor(pink)                    }                    1 -> {                        val yellow = ContextCompat.getColor(priorityIndicator.context, R.color.yellow)                        priorityIndicator.setCardBackgroundColor(yellow)                    }                    2 -> {                        val green = ContextCompat.getColor(priorityIndicator.context, R.color.green)                        priorityIndicator.setCardBackgroundColor(green)                    }                }            }        }        override fun onNothingSelected(p0: AdapterView<*>?) {            TODO("Not yet implemented")        }    }    // untuk menggubah ke priority        fun parseToPriority(priority: String, context: Context?): Priority {        val expenctedPriority = context?.resources?.getStringArray(R.array.priorities)        return when (priority){            expenctedPriority?.get(0) -> Priority.HIGH // mengembalikan enum class hight            expenctedPriority?.get(1) -> Priority.MEDIUM            expenctedPriority?.get(2) -> Priority.LOW            else -> Priority.HIGH        }    }//    private fun checkIsDataEmpty(data: List<Notes>) {//        binding.apply {//            if (data.isEmpty()){//                imgNoData.visibility = View.VISIBLE//                rvNotes.visibility = View.INVISIBLE//            } else {//                imgNoData.visibility = View.INVISIBLE//                rvNotes.visibility = View.VISIBLE//            }//        }//    }        val emptyDatabase: MutableLiveData<Boolean> = MutableLiveData(true)    fun checkIsDataEmpty(data: List<Notes>) {        emptyDatabase.value = data.isEmpty()    }//Logic nampilin background empty nya     // PINDAHAN DARI HOME FRAGMENT}