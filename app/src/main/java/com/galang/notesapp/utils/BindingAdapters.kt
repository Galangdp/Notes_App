package com.galang.notesapp.utilsimport android.view.Viewimport android.widget.Spinnerimport androidx.cardview.widget.CardViewimport androidx.constraintlayout.solver.state.Stateimport androidx.constraintlayout.widget.ConstraintLayoutimport androidx.databinding.BindingAdapterimport androidx.lifecycle.MutableLiveDataimport androidx.navigation.findNavControllerimport com.galang.notesapp.Rimport com.galang.notesapp.data.entity.Notesimport com.galang.notesapp.data.entity.Priorityimport com.galang.notesapp.ui.home.HomeFragmentDirectionsimport com.google.android.material.card.MaterialCardViewobject BindingAdapters {    //Ini ("android:parsePriorityColor") akan di panggil di dalam XML    @BindingAdapter("android:parsePriorityColor")    @JvmStatic    fun parsePriorityColor(cardView: MaterialCardView, priority: Priority){        when (priority){            Priority.HIGH ->{                cardView.setCardBackgroundColor(cardView.context.getColor(R.color.pink))            }            Priority.MEDIUM ->{                cardView.setCardBackgroundColor(cardView.context.getColor(R.color.yellow))            }            Priority.LOW ->{                cardView.setCardBackgroundColor(cardView.context.getColor(R.color.green))            }        }    }    @BindingAdapter("android:sendDataToDetail")    @JvmStatic    fun sendDataToDetail(view: ConstraintLayout, currentItem : Notes){        view.setOnClickListener {            val action = HomeFragmentDirections.actionHomeFragmentToDetailFragment(currentItem)            view.findNavController().navigate(action)        }    }    @BindingAdapter("android:parsePriorityToInt")    @JvmStatic    fun parsePriorityToInt(view: Spinner, priority: Priority) {        when (priority) {            Priority.HIGH -> {                view.setSelection(0)            }            Priority.MEDIUM -> {                view.setSelection(1)            }            Priority.LOW -> {                view.setSelection(2)            }        }    }    @BindingAdapter("android:emptyDataBase")    @JvmStatic    fun emptyDataBase(view: View, emptyDataBase: MutableLiveData<Boolean>){        when (emptyDataBase.value){            true -> view.visibility = View.VISIBLE            else -> view.visibility = View.INVISIBLE        }    }}